# - Try to find JSONCPP
# Once done this will define
#
#  JSONCPP_FOUND			- system has JSONCPP
#  JSONCPP_INCLUDE_DIR		- the JSONCPP include directory
#  JSONCPP_LIBRARY		- link library to use JSONCPP

IF (JSONCPP_INCLUDE_DIR)
  #already in cache
  SET(JSONCPP_FIND_QUIETLY TRUE)
ENDIF(JSONCPP_INCLUDE_DIR)

FIND_PATH(JSONCPP_INCLUDE_DIR json/json.h
          PATHS /usr/include)
FIND_LIBRARY(JSONCPP_LIBRARY
             NAMES jsoncpp
             PATHS /usr/lib64 /usr/lib)

# handle the QUIETLY and REQUIRED arguments and set JSONCPP_FOUND to TRUE if 
# all listed variables are TRUE

IF(JSONCPP_INCLUDE_DIR AND JSONCPP_LIBRARY)
  SET(JSONCPP_FOUND TRUE)
ELSE(JSONCPP_INCLUDE_DIR AND JSONCPP_LIBRARY)
  SET(JSONCPP_FOUND FALSE)
ENDIF(JSONCPP_INCLUDE_DIR AND JSONCPP_LIBRARY)

INCLUDE(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(JSONCPP DEFAULT_MSG JSONCPP_LIBRARY JSONCPP_INCLUDE_DIR)

MARK_AS_ADVANCED(
  JSONCPP_LIBRARY
  JSONCPP_INCLUDE_DIR)

if( JSONCPP_FOUND AND NOT TARGET JSONCPP::jsoncpp)
  add_library( JSONCPP::jsoncpp UNKNOWN IMPORTED )
  set_target_properties( JSONCPP::jsoncpp PROPERTIES
      IMPORTED_LOCATION                 "${JSONCPP_LIBRARY}"
      INTERFACE_INCLUDE_DIRECTORIES     "${JSONCPP_INCLUDE_DIRS}"
      IMPORTED_LINK_INTERFACE_LANGUAGES "C" )
endif()
